import streamlit as st
import pandas as pd
import base64
from io import BytesIO
from docx import Document
from fpdf import FPDF
import matplotlib.pyplot as plt
import numpy as np

st.set_page_config(page_title="Hidromet Pro", layout="wide")

st.title("üåßÔ∏è Sistema de An√°lisis Hidrometeorol√≥gico Avanzado")
st.markdown("---")

# Sidebar
st.sidebar.title("üîß Herramientas")
st.sidebar.markdown("Sube un archivo de mediciones para iniciar el an√°lisis.")
uploaded_file = st.sidebar.file_uploader("Subir archivo CSV", type=["csv"])

# Funci√≥n para generar informe PDF
def generate_pdf(text, df):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)

    pdf.cell(200, 10, txt="Informe Hidrometeorol√≥gico", ln=True, align="C")
    pdf.ln(10)
    pdf.multi_cell(0, 10, txt=text)

    pdf.ln(10)
    for i, row in df.iterrows():
        row_str = ', '.join([str(val) for val in row])
        pdf.cell(0, 10, txt=row_str, ln=True)

    buffer = BytesIO()
    pdf.output(buffer)
    buffer.seek(0)
    return buffer

# Funci√≥n para generar informe Word
def generate_word(text, df):
    doc = Document()
    doc.add_heading('Informe Hidrometeorol√≥gico', 0)
    doc.add_paragraph(text)

    if not df.empty:
        doc.add_heading("Datos procesados", level=1)
        table = doc.add_table(rows=1, cols=len(df.columns))
        hdr_cells = table.rows[0].cells
        for i, column in enumerate(df.columns):
            hdr_cells[i].text = column

        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, value in enumerate(row):
                row_cells[i].text = str(value)

    buffer = BytesIO()
    doc.save(buffer)
    buffer.seek(0)
    return buffer

# Procesamiento de archivo subido
if uploaded_file:
    try:
        df = pd.read_csv(uploaded_file)
        st.success("Archivo cargado correctamente.")

        st.subheader("üìä Vista previa de los datos")
        st.dataframe(df)

        # Estad√≠sticas b√°sicas
        st.subheader("üìà An√°lisis estad√≠stico")
        st.write(df.describe())

        # Visualizaci√≥n simple
        st.subheader("üìâ Visualizaci√≥n")
        selected_column = st.selectbox("Selecciona una columna para graficar", df.columns)
        fig, ax = plt.subplots()
        df[selected_column].plot(kind='line', ax=ax)
        ax.set_title(f"Tendencia de {selected_column}")
        st.pyplot(fig)

        # Informe generado
        st.subheader("üìù Redacci√≥n del informe")
        informe_text = st.text_area("Escribe tu resumen o informe aqu√≠", height=200)

        # Botones de exportaci√≥n
        if st.button("üì§ Exportar a PDF"):
            if informe_text:
                pdf_buffer = generate_pdf(informe_text, df)
                st.download_button(label="üìÑ Descargar PDF", data=pdf_buffer, file_name="informe.pdf", mime="application/pdf")
            else:
                st.warning("Por favor, escribe un informe antes de exportar.")

        if st.button("üìÑ Exportar a Word"):
            if informe_text:
                word_buffer = generate_word(informe_text, df)
                st.download_button(label="üìò Descargar Word", data=word_buffer, file_name="informe.docx", mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document")
            else:
                st.warning("Por favor, escribe un informe antes de exportar.")

    except Exception as e:
        st.error(f"Ocurri√≥ un error al procesar el archivo: {e}")

else:
    st.info("Por favor, sube un archivo CSV para iniciar.")
