import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from io import BytesIO
from docx import Document
from fpdf import FPDF
from datetime import datetime

# --- Configuraci√≥n de la p√°gina ---
st.set_page_config(page_title="HydroClima PRO", layout="wide")

# --- Usuarios permitidos ---
USERS = {
    "admin": {"password": "admin123", "role": "Administrador"},
    "tecnico": {"password": "tecnico123", "role": "T√©cnico"},
    "observador": {"password": "observador123", "role": "Observador"}
}

# --- Inicializar variables de sesi√≥n ---
if "logged_in" not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.username = ""
    st.session_state.role = ""

# --- Funciones de exportaci√≥n ---
def export_pdf(df):
    try:
        pdf = FPDF()
        pdf.add_page()
        pdf.set_font("Arial", size=12)
        pdf.cell(200, 10, txt="Informe de Datos", ln=1, align="C")
        for i in range(len(df)):
            row = ', '.join([str(x) for x in df.iloc[i]])
            pdf.cell(200, 10, txt=row, ln=1)
        buffer = BytesIO()
        pdf.output(buffer)
        buffer.seek(0)
        st.download_button("üìÑ Descargar PDF", buffer, file_name="informe.pdf")
    except Exception as e:
        st.error(f"Error al generar PDF: {e}")

def export_word(df):
    try:
        doc = Document()
        doc.add_heading("Informe de Datos", 0)
        table = doc.add_table(rows=1, cols=len(df.columns))
        hdr_cells = table.rows[0].cells
        for i, col in enumerate(df.columns):
            hdr_cells[i].text = col
        for _, row in df.iterrows():
            row_cells = table.add_row().cells
            for i, item in enumerate(row):
                row_cells[i].text = str(item)
        buffer = BytesIO()
        doc.save(buffer)
        buffer.seek(0)
        st.download_button("üìù Descargar Word", buffer, file_name="informe.docx")
    except Exception as e:
        st.error(f"Error al generar Word: {e}")

# --- Panel de Administraci√≥n ---
def admin_panel(df):
    st.title("üëë Panel de Administraci√≥n")
    if df is not None:
        st.subheader("üìà Gr√°ficos interactivos")
        for col in df.select_dtypes(include=np.number).columns:
            fig = px.line(df, y=col, title=f"Evoluci√≥n de {col}", template="plotly_dark")
            st.plotly_chart(fig, use_container_width=True)

        st.subheader("üì§ Exportar informes")
        export_pdf(df)
        export_word(df)

        st.subheader("üõ†Ô∏è Herramientas avanzadas")
        st.markdown("- Conexi√≥n a sensores de medici√≥n (modo simulado)")
        st.markdown("- Control de usuarios y roles")
        st.markdown("- Visualizaci√≥n completa del sistema")
    else:
        st.warning("Carga un archivo primero para acceder a las herramientas.")

# --- Panel T√©cnico ---
def tecnico_panel(df):
    st.title("üß™ Panel T√©cnico")
    if df is not None:
        st.dataframe(df.head())
        selected_col = st.selectbox("Selecciona una columna para graficar", df.select_dtypes(include=np.number).columns)
        st.plotly_chart(px.line(df, y=selected_col, title=f"Gr√°fico de {selected_col}", template="plotly_dark"), use_container_width=True)
        export_pdf(df)
    else:
        st.warning("Por favor, carga un archivo CSV.")

# --- Panel Observador ---
def observador_panel(df):
    st.title("üëÄ Panel de Observador")
    if df is not None:
        st.dataframe(df.head(10))
    else:
        st.warning("Carga un archivo para visualizar datos.")

# --- Login UI ---
def login_ui():
    st.title("üîê Inicio de Sesi√≥n")
    username = st.text_input("Usuario")
    password = st.text_input("Contrase√±a", type="password")
    if st.button("Iniciar sesi√≥n"):
        if username in USERS and USERS[username]["password"] == password:
            st.session_state.logged_in = True
            st.session_state.username = username
            st.session_state.role = USERS[username]["role"]
        else:
            st.error("‚ùå Usuario o contrase√±a incorrectos")

# --- Cierre de sesi√≥n ---
def logout():
    if st.sidebar.button("üîí Cerrar sesi√≥n"):
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.session_state.role = ""

# --- Cargar archivo ---
def cargar_csv():
    st.sidebar.subheader("üìÅ Cargar archivo CSV")
    archivo = st.sidebar.file_uploader("Selecciona archivo", type=["csv"])
    if archivo:
        return pd.read_csv(archivo)
    return None

# --- L√≥gica principal ---
if not st.session_state.logged_in:
    login_ui()
else:
    st.sidebar.write(f"üë§ Usuario: {st.session_state.username}")
    st.sidebar.write(f"üîë Rol: {st.session_state.role}")
    logout()
    df = cargar_csv()
    rol = st.session_state.role
    if rol == "Administrador":
        admin_panel(df)
    elif rol == "T√©cnico":
        tecnico_panel(df)
    elif rol == "Observador":
        observador_panel(df)
